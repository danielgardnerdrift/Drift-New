### /userchatsession/get_data

#3238 [[open]](https://api.autosnap.cloud/workspace/7-0/api/321/query/3238)

URL: [https:/api.autosnap.cloud/DMq6NJZ_/userchatsession/get_data](https:/api.autosnap.cloud/DMq6NJZ_/userchatsession/get_data)

#### Curl Command:
```
curl -X POST https://api.autosnap.cloud/api:DMq6NJZ_/userchatsession/get_data \
  -H "Content-Type: application/json" \
  -d '{ 
    "session_id": "", 
    "ip_address": "", 
    "browser_fingerprint": "" 
  }'
```

Get the data for a user chat session based on their ip address

#### Inputs: 3

##### `session_id` (text) single (required)
- nullable
- not nullable
- trim
##### `ip_address` (text) single (optional)
- not nullable
- trim
##### `browser_fingerprint` (text) single (optional)
- nullable
- not nullable
- trim

#### Steps: 6

##### 1 Conditional - if:
  -  `input:session_id` != `const:null:null`
**then**
##### 1.1 Has Record **Track all visitors and users of driftbot chat including relevant IP address information, and contact information. Chat users will be converted to regular drift users upon signup.** as `var:session_exists`
  Inputs: 
  - field_name: `const:session_id`
  - field_value: `input:session_id`
##### 1.2 Conditional - if:
  -  `var:session_exists` = `const:bool:true`
**then**
##### 1.2.1 Get Record **Track all visitors and users of driftbot chat including relevant IP address information, and contact information. Chat users will be converted to regular drift users upon signup.** as `var:session`
  Inputs: 
  - field_name: `const:session_id`
  - field_value: `input:session_id`
  - lock: `const:bool:false`
##### 1.2.2 Add Record in **Track all visitors and users of driftbot chat including relevant IP address information, and contact information. Chat users will be converted to regular drift users upon signup.** as `var:session`
  Inputs: 
  - created_at: `const:now`
  - ip_address: `input:ip_address`
  - session_id: `const:session_`
    - filters:
    - **Filters: 1**
    - concat
      - value: *<blank>*
        - **Filters: 1**
        - uuid
      - sep: *<blank>*
  - name: `const:null:null`
  - user_email: `const:null:null`
  - phone: `const:null:null`
  - tokens_remaining_internal: `const:int:100`
  - tokens_remaining_integer: `const:int:100`
  - @meta: `const:null:null`
##### 1.3 Add Record in **Track all visitors and users of driftbot chat including relevant IP address information, and contact information. Chat users will be converted to regular drift users upon signup.** as `var:session`
  Inputs: 
  - created_at: `const:now`
  - ip_address: `input:ip_address`
  - session_id: `const:session_`
    - filters:
    - **Filters: 1**
    - concat
      - value: *<blank>*
        - **Filters: 1**
        - uuid
      - sep: *<blank>*
  - name: `const:null:null`
  - user_email: `const:null:null`
  - phone: `const:null:null`
  - tokens_remaining_internal: `const:int:100`
  - tokens_remaining_integer: `const:int:100`
  - @meta: `const:null:null`
#### Outputs: 1
- session: `var:session`


### /conversation/all_messages/conversation_id

#3224 [[open]](https://api.autosnap.cloud/workspace/7-0/api/327/query/3224)

URL: [https:/api.autosnap.cloud/owKhF9pX/conversation/all_messages/conversation_id](https:/api.autosnap.cloud/owKhF9pX/conversation/all_messages/conversation_id)

#### Curl Command:
```
curl -X GET https://api.autosnap.cloud/api:owKhF9pX/conversation/all_messages/conversation_id?conversation_id=
```

get all messages related to a specific conversation_id

#### Inputs: 1

##### `conversation_id` (int) single (required)
- not nullable

#### Steps: 6

##### 1 Has Record **for all conversations a user or visitor has with driftbot to take an action using MPC** as `var:conversation_exists`
  Inputs: 
  - field_name: `const:id`
  - field_value: `input:conversation_id`
##### 2 Conditional - if:
  -  `var:conversation_exists` = `const:bool:true`
**then**
##### 2.1 Query all Records from **for all messages related to a conversation between driftbot and a user/visitor related to MPC** as `var:collection`
  - Custom Filters:
    -  `col:user_driftbot_messages.user_driftbot_conversations_id` = `input:conversation_id`
  - as paginated list with metadata
  - sorted by `user_driftbot_messages.created_at` ascending
##### 2.2 Create Variable as `var:messages`
  From: `var:collection.items`
##### 2.3 Update Variable `var:messages`
  - set to `var:messages` with filters:
  - with filters:
    - **Filters: 1**
    - map
      - code: return {role: $this.role, content: $this.content};

      - timeout: 10
##### 2.4 Throw Error
  - value: `conversation does not exist`
#### Outputs: 2
- pagination: `var:collection`
  - filters:
  - **Filters: 1**
  - unset
    - path: items
- messages: `var:messages`
